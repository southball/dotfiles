if command -v direnv &> /dev/null; then
  eval "$(direnv hook zsh)"
fi

if command -v kubectl &> /dev/null; then
  alias k=kubectl
  source <(kubectl completion zsh)
  complete -F __start_kubectl k
fi

if command -v opam &> /dev/null; then
  eval "$(opam env)"
fi

if ! command -v nvim &> /dev/null; then
  export EDITOR=vim
else
  export EDITOR=nvim
  alias vim=nvim
fi

if [ -f "$HOME/.cargo/env" ]; then
  source "$HOME/.cargo/env"
fi

if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ];
  then . "/home/southball/google-cloud-sdk/path.zsh.inc";
fi

if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ];
  then . "$HOME/google-cloud-sdk/completion.zsh.inc";
fi

if [ -d "$HOME/.volta" ]; then
  export VOLTA_HOME="$HOME/.volta"
  export PATH="$VOLTA_HOME/bin:$PATH"
fi

if [ -d "$HOME/.pyenv" ]; then
  export PYENV_ROOT="$HOME/.pyenv"
  command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
fi

if [ -d "$HOME/.rbenv" ]; then
  eval "$($HOME/.rbenv/bin/rbenv init - zsh)"
fi

if [ -d "$HOME/.ghcup" ]; then
  [ -f "$HOME/.ghcup/env" ] && source "$HOME/.ghcup/env"
fi

if [ -d "$HOME/go" ]; then
  export PATH=$PATH:$HOME/go/bin
fi

export PATH="$PATH:$HOME/.local/bin"
export PATH="$PATH:./node_modules/.bin"

function aws_mfa() {
  if [ $# != 1 ]; then
    echo "profileを指定してください"
    return
  fi
  unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
  read -p "MFAトークン: " token
  if [ -z "$token" ]; then
    echo "トークンを入力してください"
    return
  fi
  eval `aws sts get-session-token --profile $1 \
          --serial-number $(aws sts get-caller-identity --profile $1 --query Arn --output text | sed 's/:user/:mfa/') \
          --token-code ${token} \
          --duration-seconds 129600 \
        | awk ' $1 == "\"AccessKeyId\":" { gsub(/"/,""); gsub(/,/,""); print "export AWS_ACCESS_KEY_ID="$2 } $1 == "\"SecretAccessKey\":" { gsub(/"/,""); gsub(/,/,""); print "export AWS_SECRET_ACCESS_KEY="$2} $1 == "\"SessionToken\":" { gsub(/"/,""); gsub(/,/,""); print "export AWS_SESSION_TOKEN="$2 } '`
}

